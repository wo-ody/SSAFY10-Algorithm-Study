package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ16434 {
	static int N;
	static long Hatk, answer;
	static roomInformation[] roomInfo;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		Hatk = Long.parseLong(st.nextToken());

		roomInfo = new roomInformation[N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			long t = Long.parseLong(st.nextToken());
			long a = Long.parseLong(st.nextToken());
			long h = Long.parseLong(st.nextToken());

			roomInfo[i] = new roomInformation(t, a, h);
		}

		long start = 1;
		long end = Long.MAX_VALUE-1;
		while (start <= end) {
			long mid = (start + end) / 2;
			
			long res = simulation(mid);
			
			if(res > 0) {
				answer = mid;
				end = mid - 1;
			}else {
				start = mid + 1;
			}
		}

		System.out.println(answer);
	}

	static long simulation(long hp) {
		long copyHatk = Hatk;
		long copyHp = hp;
		for (int i = 0; i < N; i++) {
			// 몬스터인 경우
			if (roomInfo[i].t == 1) {
				long monsterDamage = roomInfo[i].a;
				long monsterHp = roomInfo[i].h;
				
				if(copyHatk >= monsterHp) continue;
				
				if(monsterHp % copyHatk == 0) {
					hp -= ((monsterHp/copyHatk)-1) * monsterDamage;
				}else {
					hp -= (monsterHp/copyHatk) * monsterDamage;
				}
				
				if(hp <= 0) return -1;

				// 포션인 경우
			} else {
				copyHatk += roomInfo[i].a;
				hp += roomInfo[i].h;
				if(hp > copyHp) {
					hp = copyHp;
				}
			}
		}
		return hp;
	}

	static class roomInformation {
		long t, a, h;

		roomInformation(long t, long a, long h) {
			this.t = t;
			this.a = a;
			this.h = h;
		}
	}

}
